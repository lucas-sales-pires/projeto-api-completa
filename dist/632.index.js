"use strict";exports.id=632,exports.ids=[632],exports.modules={6632:(e,r,t)=>{t.d(r,{getDefaultRoleAssumer:()=>y,getDefaultRoleAssumerWithWebIdentity:()=>S});var n=t(75592),s=t(99389),i=t(1208),o=t(77940),a=t(47207),c=t(8766),l=t(10784);class d extends(o.Command.classBuilder().ep({...a.S}).m((function(e,r,t,n){return[(0,i.TM)(t,this.serialize,this.deserialize),(0,s.rD)(t,e.getEndpointParameterInstructions())]})).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(c.KT,c.AA).ser(l.$3).de(l.MV).build()){}const u="us-east-1",g=async(e,r,t)=>{const n="function"==typeof e?await e():e,s="function"==typeof r?await r():r;return t?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${n} (provider)`,`${s} (parent client)`,`${u} (STS default)`),n??s??u};var p=t(28658);const f=(e,r)=>r?class extends e{constructor(e){super(e);for(const e of r)this.middlewareStack.use(e)}}:e,y=(e={},r)=>((e,r)=>{let t,s;return async(i,o)=>{if(s=i,!t){const{logger:n=e?.parentClientConfig?.logger,region:i,requestHandler:o=e?.parentClientConfig?.requestHandler,credentialProviderLogger:a}=e,c=await g(i,e?.parentClientConfig?.region,a);t=new r({credentialDefaultProvider:()=>async()=>s,region:c,requestHandler:o,logger:n})}const{Credentials:a}=await t.send(new n.Q(o));if(!a||!a.AccessKeyId||!a.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${o.RoleArn}`);return{accessKeyId:a.AccessKeyId,secretAccessKey:a.SecretAccessKey,sessionToken:a.SessionToken,expiration:a.Expiration,credentialScope:a.CredentialScope}}})(e,f(p.i,r)),S=(e={},r)=>((e,r)=>{let t;return async n=>{if(!t){const{logger:n=e?.parentClientConfig?.logger,region:s,requestHandler:i=e?.parentClientConfig?.requestHandler,credentialProviderLogger:o}=e,a=await g(s,e?.parentClientConfig?.region,o);t=new r({region:a,requestHandler:i,logger:n})}const{Credentials:s}=await t.send(new d(n));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${n.RoleArn}`);return{accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,credentialScope:s.CredentialScope}}})(e,f(p.i,r))}};